mean(roll)
var(roll)
sd(roll)
plot(table.r, xlab = "die face (X)", ylab = "probability (P(X))", type = "h", ylim = c(0,1))
?pois
?ppois
bonus <- 1 - ppois(2,2)# bonus if more than 3 given lambda = 2
print(bonus)
exactly_3 <- dpois(3,2)
print(exactly_3)
x=rpois(15,10)
x
mean(x)
sd(x)
sqrt(10)
x=rpois(15,10)
x
mean(x)
sd(x)
dbinom(10, 30, 0.4)
x=rpois(15,10)
dbinom(10, 30, 0.4)
dpois(2,3)
mean(sample)
sample <- rexp(1000, 0.5)
mean(sample)
sample <- rexp(1000, 0.5)
mean(sample)
n = 10000
sample <- rnorm(10000, 0.1)
samplepower5 = sample^5
mean(samplepower5)
?rnorm
sample <- rnorm(n, 10000, 0.1)
samplepower5 = sample^5
mean(samplepower5)
n <- 10000
sample <- rnorm(n, 0.1)
samplepower5 = sample^5
mean(samplepower5)
n <- 10000
sample <- rnorm(n, 0.1)
samplepower5 = sample^5
mean(samplepower5)
n <- 10000
sample <- rnorm(n, 0, 1)
samplepower5 = sample^5
mean(samplepower5)
n <- 10000
sample <- rnorm(n, 0, 1)
samplepower5 = sample^5
mean(samplepower5)
?binom
?rbinom
flip <- sample(c(1:2), 10, replace = T, prob=c(0.4,0.6))
more_than_6_heads = 1 - pbinom(5,10,0.4)
more_than_6_heads
## Opts
rm(list=ls(all=TRUE))
options(warn=-1)
drop <- "interneuron_TA3"
drop_temp <- "interneuron_TA3"
DGEs <- "/Users/harryyang/Documents/Research/Plath\ Lab/TA3/DGEs/"
sample <- "e1"
work_dir <- paste0("~/Documents/Research/Plath Lab/TA3/", drop_temp, "/", sample, "/")
if (!dir.exists(work_dir))
{
dir.create((work_dir))
}
setwd(work_dir)
# /Users/harryyang/Documents/Research/Plath Lab/interneuron_downstream/Script/interneuron_downstream_analysis
##########################################
# SAMPLES                                #
# DropTA1e1v1.collapsed.human.dge.tsv.gz #
# DropTA1e1v2.collapsed.human.dge.tsv.gz #
# DropTA1e2v1.collapsed.human.dge.tsv.gz #
# DropTA1e2v2.collapsed.human.dge.tsv.gz #
##########################################
## Setup
source("/Users/harryyang/Documents/Research/Plath Lab/interneuron_downstream/Script/interneuron_downstream_analysis/TA-Interneuron-2017_02_08_pipeline_fxns.R")
outdir = InitDir(getwd())
cores = SetCores(7)
TA1e1v1 = read_dge(paste0(DGEs, "DropTA3e1v1.collapsed.HUMAN.dge.tsv.gz"),  "TA3_e1")
TA1e1v2 = read_dge(paste0(DGEs, "DropTA3e2.collapsed.HUMAN.dge.tsv.gz"),  "TA3_e2")
TA1e2v1 = read_dge(paste0(DGEs, "DropTA3e3.collapsed.HUMAN.dge.tsv.gz"),  "TA3_e3")
TA1e2v2 = read_dge(paste0(DGEs, "DropTA3e4.collapsed.HUMAN.dge.tsv.gz"),  "TA3_e4")
## Opts
rm(list=ls(all=TRUE))
options(warn=-1)
drop <- "interneuron_TA3"
drop_temp <- "interneuron_TA3"
DGEs <- "/Users/harryyang/Documents/Research/Plath\ Lab/TA3/DGEs/"
sample <- "e"
work_dir <- paste0("~/Documents/Research/Plath Lab/TA3/", drop_temp, "/", sample, "/")
if (!dir.exists(work_dir))
{
dir.create((work_dir))
}
setwd(work_dir)
# /Users/harryyang/Documents/Research/Plath Lab/interneuron_downstream/Script/interneuron_downstream_analysis
##########################################
# SAMPLES                                #
# DropTA1e1v1.collapsed.human.dge.tsv.gz #
# DropTA1e1v2.collapsed.human.dge.tsv.gz #
# DropTA1e2v1.collapsed.human.dge.tsv.gz #
# DropTA1e2v2.collapsed.human.dge.tsv.gz #
##########################################
## Setup
source("/Users/harryyang/Documents/Research/Plath Lab/interneuron_downstream/Script/interneuron_downstream_analysis/TA-Interneuron-2017_02_08_pipeline_fxns.R")
outdir = InitDir(getwd())
cores = SetCores(7)
TA1e1v1 = read_dge(paste0(DGEs, "DropTA3e1v1.collapsed.HUMAN.dge.tsv.gz"),  "TA3_e1")
TA1e1v2 = read_dge(paste0(DGEs, "DropTA3e2.collapsed.HUMAN.dge.tsv.gz"),  "TA3_e2")
TA1e2v1 = read_dge(paste0(DGEs, "DropTA3e3.collapsed.HUMAN.dge.tsv.gz"),  "TA3_e3")
## Opts
rm(list=ls(all=TRUE))
options(warn=-1)
drop <- "interneuron_TA3"
drop_temp <- "interneuron_TA3"
DGEs <- "/Users/harryyang/Documents/Research/Plath\ Lab/TA3/DGEs/"
sample <- "e"
work_dir <- paste0("~/Documents/Research/Plath Lab/TA3/", drop_temp, "/", sample, "/")
if (!dir.exists(work_dir))
{
dir.create((work_dir))
}
setwd(work_dir)
# /Users/harryyang/Documents/Research/Plath Lab/interneuron_downstream/Script/interneuron_downstream_analysis
##########################################
# SAMPLES                                #
# DropTA1e1v1.collapsed.human.dge.tsv.gz #
# DropTA1e1v2.collapsed.human.dge.tsv.gz #
# DropTA1e2v1.collapsed.human.dge.tsv.gz #
# DropTA1e2v2.collapsed.human.dge.tsv.gz #
##########################################
## Setup
source("/Users/harryyang/Documents/Research/Plath Lab/interneuron_downstream/Script/interneuron_downstream_analysis/TA-Interneuron-2017_02_08_pipeline_fxns.R")
outdir = InitDir(getwd())
cores = SetCores(7)
TA1e1v1 = read_dge(paste0(DGEs, "DropTA3e1.collapsed.HUMAN.dge.tsv.gz"),  "TA3_e1")
TA1e1v2 = read_dge(paste0(DGEs, "DropTA3e2.collapsed.HUMAN.dge.tsv.gz"),  "TA3_e2")
TA1e2v1 = read_dge(paste0(DGEs, "DropTA3e3.collapsed.HUMAN.dge.tsv.gz"),  "TA3_e3")
TA1e2v2 = read_dge(paste0(DGEs, "DropTA3e4.collapsed.HUMAN.dge.tsv.gz"),  "TA3_e4")
D = join_all(list(TA1e1v1, TA1e1v2, TA1e2v1, TA1e2v2), by='rn', type='full')
rownames(D) = D$rn
D$rn = NULL
D[is.na(D)] = 0
# write.table(D, file="master.dge.tsv", sep="\t", col.names=NA, row.names=T)
## Pipeline
# -- build data
# raw.data <- ReadDGE(paste0(getwd(), "/", drop, ".dge.tsv.gz"))
# modify sample name (i.e. _e1v1_) for different samples
raw.data <- D[,grepl(paste0("_",sample), names(D))] # will only take cells from e1v1
# For all samples
# raw.data <- D
# TODO - modify so it can work for all samples
# TODO - write a wrapper for automation
# i.e. CELL DESIGN AND STUFF
filtered.data <- FilterGenes(raw.data, is.expr=1, n.cells=3)
filtered.data <- FilterCells(filtered.data, is.expr=1, min.genes=500, min.transcripts=1250, max.transcripts=60000)
filtered.data <- filtered.data[!grepl("RPL|RPS|RIK", row.names(filtered.data)),]
normalized.data <- NormalizeDGE(filtered.data)
scaled.data <- ScaleData(normalized.data)
cell.design <- BuildCellMetaData(filtered.data, is.expr=1, run.delimit=1, tp.delimit=2, cell.delimit=3)
# cell.design <- BuildCellMetaData(normalized.data, is.expr=1, run.delimit=1, tp.delimit=2, cell.delimit=3)
# cell.design$Cell <- cell.design$Run # this will move run to cell
cell.design$Run <- rep("TA3") # this will correct the run column
# cell.design$Experiment <- rep(sample) # this will add an experiment column
cell.design$Timepoint <- NULL # this will remove the timepoint column
gene.design <- BuildGeneMetaData(normalized.data)
PlotDistribuionsWithoutTimepoint(cell.design, out=paste0(outdir, "distributions/", drop))
# -- write out data
# WriteData(filtered.data, gzfile(paste0(outdir, "data/", drop, ".data.filtered.tsv.gz")))
# WriteData(normalized.data, gzfile(paste0(outdir, "data/", drop, ".data.normalized.tsv.gz")))
# WriteData(scaled.data, gzfile(paste0(outdir, "data/", drop, ".data.scaled.tsv.gz")))
# WriteData(cell.design, gzfile(paste0(outdir, "data/", drop, ".data.cell.design.tsv.gz")))
# WriteData(gene.design, gzfile(paste0(outdir, "data/", drop ,".data.gene.design.tsv.gz")))
# -- gene selection with normalized data
# disperse.genes <- PlotDispersion(gene.design, x.low=0.0125, x.high=8, y.low=0.5, y.high=Inf, out=paste0(outdir, "distributions/", drop, ".MeanDisperson.png"))
# disperse.data <- scaled.data[row.names(scaled.data) %in% disperse.genes, ]
# -- pca with scaled data (or use `disperse.data`` if doing a quick tsne with a subset of genes)
type.of.data <- scaled.data
npc <- 30
pca <- RunPCA(type.of.data, n=npc)
projected.loadings = t(type.of.data) %*% as.matrix(pca$v)
# drop <- "interneuron_rerun_perp_30"
# -- tsne with new scaled loadings
#tsne <- RunTSNE(projected.loadings, perp=30, id=50, iter=2000, theta=0, dims=2)
tsne <- RunTSNE(projected.loadings, perp=20, id=50, iter=2000, theta=0, dims=2)
# tsne <- RunTSNE(projected.loadings, perp=27, id=50, iter=2000, theta=0, dims=2)
# tsne <- RunTSNE(projected.loadings, perp=100, id=80, iter=4000, theta=0, dims=2)
tsne.plot.data = cbind(cell.design, data.frame(X=tsne$Y[,1], Y=tsne$Y[,2]))
WriteData(tsne.plot.data, gzfile(paste0(outdir, "data/", drop, ".data.tsne.tsv.gz")))
# -- plot tsne
PlotTsneExperiment(tsne.plot.data, background=data.frame(X=tsne$Y[,1], Y=tsne$Y[,2]), out=paste0(outdir, "tsne/", drop), h = 8, w = 8)
# -- define clusters on tsne via dbscan
require(dbscan)
coords <- data.frame(row.names=row.names(tsne.plot.data), X=tsne.plot.data$X, Y=tsne.plot.data$Y)
dbscan::kNNdistplot(coords, k=5)
knee = 5;
abline(h=knee, lty=2) # modify knee var.
dbscan.plot.data <- RunDBSCAN(coords, knee=knee, minpts=8, small.cluster.thresh=10)
WriteData(dbscan.plot.data, gzfile(paste0(outdir, "data/", drop, ".data.dbscan.tsv.gz")))
# -- plot dbscan results
library(ggplot2)
ggplot(dbscan.plot.data, aes(X, Y)) + geom_point(aes(colour=Cluster)) +
geom_text(data=dbscan.plot.data, aes(meanX, meanY, label=Cluster), hjust=0.5, vjust=0.5, color='black', size=10) +
ThemeOpts() + ggsave(paste0(outdir, "dbscan/", drop, ".dbscan.all.png"), height=12, width=12)
ggplot(subset(dbscan.plot.data, Cluster!="Noise"), aes(X, Y)) + geom_point(aes(colour=Cluster)) +
geom_text(data=subset(dbscan.plot.data, Cluster!="Noise"), aes(meanX, meanY, label=Cluster), hjust=0.5, vjust=0.5, color='black', size=10) +
ThemeOpts() + ggsave(paste0(outdir, "dbscan/", drop, ".dbscan.no.noise.png"), height=12, width=12)
ggplot(subset(dbscan.plot.data, Cluster!="Noise" & Cluster!="Small_Cluster"), aes(X, Y)) +geom_point(aes(colour=Cluster)) +
geom_text(data=subset(dbscan.plot.data, Cluster!="Noise" & Cluster!="Small_Cluster"), aes(meanX, meanY, label=Cluster), hjust=0.5, vjust=0.5, color='black', size=10) +
ThemeOpts() + ggsave(paste0(outdir, "dbscan/", drop, ".dbscan.cleaned.png"), height=12, width=12)
ggplot(subset(dbscan.plot.data, Cluster!="Noise" & Cluster!="Small_Cluster"), aes(X, Y)) + geom_point(aes(colour=Experiment)) +
geom_text(data=subset(dbscan.plot.data, Cluster!="Noise" & Cluster!="Small_Cluster"), aes(meanX, meanY, label=Cluster), hjust=0.5, vjust=0.5, color='black', size=10) +
ThemeOpts() + ggsave(paste0(outdir, "dbscan/", drop, ".dbscan.cleaned.colourExperiment.png"), height=12, width=12)
# - cluster stats
PlotClusterStats(dbscan.plot.data, out=paste0(outdir, "dbscan/", drop))
# -- differential expression between clusters (1 vs all)
one.v.all <- DiffExp(dbscan.plot.data, data=normalized.data, out=paste0(outdir, "diffexp/cluster.v.all/", drop), cores=7)
pairwise  <- DiffExpPairwise(dbscan.plot.data, data=normalized.data, out=paste0(outdir, "diffexp/pairwise/", drop), cores=7)
# -- filter for significant genes, ordered by log diff (1 vs all)
p.val.cutoff = 0.01 ; avg.diff.cutoff = 0.5
one.v.all <- one.v.all[lapply(one.v.all,length)>0]
sig.genes.list <- lapply(one.v.all, function(x) {subset(x, p.val<=p.val.cutoff & avg.diff>=avg.diff.cutoff)[order(subset(x, p.val<=p.val.cutoff & avg.diff>=avg.diff.cutoff)$avg.diff, decreasing=TRUE),]})
sig.genes.list <- sig.genes.list[sapply(sig.genes.list, function(x) dim(x)[1]) > 0]
sig.genes.list <- lapply(sig.genes.list, function(x) {cbind(x, gene=row.names(x), cluster=paste0("C", sapply(strsplit(colnames(x)[3], ".", fixed=TRUE), function(x) (x[3]))))})
sig.genes.list <- lapply(sig.genes.list, setNames, nm=c("p.val", "avg.diff", "pct.cluster", "pct.others", "mean.exp.cluster", "mean.exp.others", "log.mean.exp.cluster", "log.mean.exp.others", "gene", "cluster"))
sig.genes.one.v.all = do.call(rbind, sig.genes.list)
WriteData(sig.genes.one.v.all, gzfile(paste0(outdir, "diffexp/", drop, ".negbinom.cluster.v.all.sig.genes.tsv.gz")))
# -- filter for significant genes, ordered by log diff (pairwise)
pariwise <- pairwise[lapply(pairwise,length)>0]
sig.genes.list = lapply(pairwise, function(x) { subset(x, p.val<=p.val.cutoff & abs(avg.diff)>=avg.diff.cutoff)[order(subset(x, p.val<=p.val.cutoff & abs(avg.diff)>=avg.diff.cutoff)$avg.diff, decreasing=TRUE),]})
sig.genes.list <- sig.genes.list[sapply(sig.genes.list, function(x) dim(x)[1]) > 0]
sig.genes.list = lapply(sig.genes.list, function(x) {cbind(x, gene=row.names(x), cluster.group=paste0("C", sapply(strsplit(colnames(x)[3], ".", fixed=TRUE), function(x) (x[3])), ".v.C", sapply(strsplit(colnames(x)[4], ".", fixed=TRUE), function(x) (x[3]))))})
sig.genes.list = lapply(sig.genes.list, setNames, nm=c("p.val", "avg.diff", "pct.left", "pct.right", "mean.exp.left", "mean.exp.right", "log.mean.exp.left", "log.mean.exp.right", "gene", "cluster"))
sig.genes.pairwise = do.call(rbind, sig.genes.list)
WriteData(sig.genes.pairwise, gzfile(paste0(outdir, "diffexp/", drop, ".negbinom.pairwise.sig.genes.tsv.gz")))
# -- GO analysis (*takes about 1hr for all pairwise (up/down-regulated genes)*)
# sig.genes.one.v.all %>% group_by(cluster) %>% top_n(50, avg.diff) %>% do(RunGO(.$gene, all.genes=row.names(filtered.data)[15:nrow(filtered.data)], cluster=.$cluster, note=c("cluster.v.all", "top.degs")))
#
### NEW - gene distribution
cell_markers <- c("astrocytes", "interneuron", "excitatory", "inhibitory")
require(reshape2); require(ggplot2)
for (cell_marker in cell_markers){
file <- paste0("/Users/harryyang/Documents/Research/Plath Lab/interneuron_downstream/", cell_marker, ".txt")
markers <- read.table(file, header=TRUE, sep="\t")
marker.data <- cbind(data.frame(row.names=row.names(dbscan.plot.data), X=dbscan.plot.data$X, Y=dbscan.plot.data$Y, t(subset(normalized.data, row.names(normalized.data) %in% toupper(markers$Gene.ID)))))
marker.data.melted <- melt(marker.data, id.vars=c("X", "Y"))
ggplot(marker.data.melted, aes(X,Y)) +
geom_point(aes(colour=value), alpha=0.3) +
facet_wrap(~variable) +
scale_colour_gradientn(colours=c('grey', rev(rainbow(3)))) +
FacetThemeOpts() +
theme(strip.text = element_text(size=10)) +
ggsave(paste0(outdir, "dbscan/", drop, ".", cell_marker,".markers.pdf"), height=15, width=15)
}
cluster_pairs <- levels(sig.genes.pairwise$cluster)
clusters <- levels(sig.genes.one.v.all$cluster)
cluster_list <- list()
for (cluster in clusters){
cluster_list[[cluster]] <- data.frame()
}
print(cluster_list)
# each cluster have list now
top_n <- 100
# debug
# cluster_pair = c("C1.v.C2")
for (cluster_pair in cluster_pairs)
{
print(cluster_pair)
# get cluster specific genes and add it to each gene cluster
left <- (strsplit(as.character(cluster_pair), "\\.")[[1]][1]) # left
right <- (strsplit(as.character(cluster_pair), "\\.")[[1]][3]) # right
left_matrix <- subset(sig.genes.pairwise, cluster == cluster_pair & avg.diff > 0, row.names = row.names(sig.genes.pairwise))
left_significant<- left_matrix[order(left_matrix$pct.left - left_matrix$pct.right, decreasing = TRUE)[1:top_n],]
right_matrix <- subset(sig.genes.pairwise, cluster == cluster_pair & avg.diff < 0, row.names = row.names(sig.genes.pairwise))
right_significant<- right_matrix[order(right_matrix$pct.right - right_matrix$pct.left, decreasing = TRUE)[1:top_n],]
left_gene = data.frame(left_significant$gene)
# head(left_gene)
right_gene = data.frame(right_significant$gene)
colnames(left_gene) <- left
colnames(right_gene) <- right
cluster_list[[left]] <- rbind.data.frame(cluster_list[[left]], left_gene)
cluster_list[[right]] <- rbind.data.frame(cluster_list[[right]], right_gene)
# print(cluster_list[[left]])
}
# cluster = 'C2'
for (cluster in clusters){
gene_count<-data.frame(table(as.vector(cluster_list[[cluster]])))
cell_markers <- subset(gene_count, Freq >= 3)[1][1]
for (other_cluster in clusters)
{
if (cluster != other_cluster)
{
# print(other_cluster)
other_gene_count <- data.frame(table(as.vector(cluster_list[[other_cluster]])))
other_cell_markers <- subset(other_gene_count, Freq >= 1)[1][1]
cell_markers <- anti_join(cell_markers, other_cell_markers)
}
}
colnames(cell_markers) <- c("Gene.ID")
marker.data <- cbind(data.frame(row.names=row.names(dbscan.plot.data), X=dbscan.plot.data$X, Y=dbscan.plot.data$Y, t(subset(normalized.data, row.names(normalized.data) %in% toupper(cell_markers$Gene.ID)))))
marker.data.melted <- melt(marker.data, id.vars=c("X", "Y"))
ggplot(marker.data.melted, aes(X,Y)) +
geom_point(aes(colour=value), alpha=0.3) +
facet_wrap(~variable) +
scale_colour_gradientn(colours=c('grey', rev(rainbow(3)))) +
FacetThemeOpts() +
theme(strip.text = element_text(size=10)) +
ggsave(paste0(outdir, "dbscan/", drop, ".", cluster,".markers.jpg"), height=15, width=15)
}
##### SUBSET DGE
interneuron_cluster_dbscan <- subset(dbscan.plot.data, Cluster == '5', row.names=row.names(dbscan.plot.data))
interneuron_cells <- row.names(interneuron_cluster_dbscan)
interneuron_DGEs <- raw.data[,colnames(raw.data)%in%interneuron_cells]
WriteData(interneuron_DGEs, gzfile(paste0(outdir, "data/", drop, ".dge.interneuron.tsv.gz")))
# -- heatmap of significant genes (1 vs all)
require(pheatmap)
require(RColorBrewer)
top.n <- 100
sig.genes.one.v.all %>% group_by(cluster) %>% top_n(top.n, avg.diff) -> top.genes
#sig.genes.one.v.all.dge <- scaled.data[as.vector(top.genes$gene), row.names(subset(dbscan.plot.data, Cluster!="Noise" & Cluster!="Small_Cluster"))]
sig.genes.one.v.all.dge <- scaled.data[as.vector(top.genes$gene), row.names(subset(dbscan.plot.data, Cluster!="Noise" & Cluster!="Small_Cluster"))]
# genes.to.remove <- c("MALAT1", "RN45S", row.names(sig.genes.one.v.all.dge[grepl("PCDH|UGT1", row.names(sig.genes.one.v.all.dge)),]))
# sig.genes.one.v.all.dge <- sig.genes.one.v.all.dge[!row.names(sig.genes.one.v.all.dge) %in% genes.to.remove, ]
heatmap.annotation <- subset(dbscan.plot.data, Cluster!="Noise" & Cluster!="Small_Cluster")[names(sig.genes.one.v.all.dge),c(3,8)]
heatmap.annotation <- heatmap.annotation[with(heatmap.annotation, order(Cluster, Experiment)),]
# ann.colors <- GetAnnotationColors(drop)
cluster.colors <- ColorHue(23)
cluster.colors <- colorRampPalette(c('magenta', 'grey', 'green'))(23)
ann.colors = list(
Experiment = c("e1v1"="#F8766D", "e1v2"="#D39200", "e2v1"="#93AA00", "e2v2"="#00BA38"),
Cluster   = c("1"=cluster.colors[1], "2"=cluster.colors[2], "3"=cluster.colors[3], "4"=cluster.colors[4], "5"=cluster.colors[5],
"6"=cluster.colors[6], "7"=cluster.colors[7], "8"=cluster.colors[8], "9"=cluster.colors[9], "10"=cluster.colors[10],
"11"=cluster.colors[11], "12"=cluster.colors[12], "13"=cluster.colors[13], "14"=cluster.colors[14], "15"=cluster.colors[15],
"16"=cluster.colors[16], "17"=cluster.colors[17], "18"=cluster.colors[18], "19"=cluster.colors[19], "20"=cluster.colors[20],
"21"=cluster.colors[21], "22"=cluster.colors[22], "23"=cluster.colors[23])
)
WriteData(sig.genes.one.v.all.dge, gzfile(paste0(outdir, "data/", drop, ".data.negbinom.one.v.all.sig.genes.tsv.gz")))
WriteData(heatmap.annotation, gzfile(paste0(outdir, "data/", drop, ".data.negbinom.one.v.all.sig.genes.annotation.tsv.gz")))
library(pheatmap)
library(RColorBrewer)
pheatmap(MinMax(sig.genes.one.v.all.dge[,row.names(heatmap.annotation)], min=-1.5, max=1.5),
cluster_rows=FALSE, cluster_cols=FALSE,
show_rownames=if (nrow(sig.genes.one.v.all.dge)<50) TRUE else FALSE, show_colnames=FALSE,
color=colorRampPalette(rev(brewer.pal(n=7, name="RdBu")))(100),
annotation_col=heatmap.annotation, annotation_colors=ann.colors,
gaps_col=cumsum(table(subset(heatmap.annotation, Cluster!="Noise" & Cluster!="Small_Cluster")$Cluster)),
filename=paste0(outdir, "heatmaps/", drop, ".negbinom.cluster.v.all.heatmap.",top.n,".genes.per.cluster.v2.png"), height=10, width=15)
cluster = 'C2'
for (cluster in clusters){
gene_count<-data.frame(table(as.vector(cluster_list[[cluster]])))
cell_markers <- subset(gene_count, Freq >= 2)[1][1]
for (other_cluster in clusters)
{
if (cluster != other_cluster)
{
# print(other_cluster)
other_gene_count <- data.frame(table(as.vector(cluster_list[[other_cluster]])))
other_cell_markers <- subset(other_gene_count, Freq >= 1)[1][1]
cell_markers <- anti_join(cell_markers, other_cell_markers)
}
}
colnames(cell_markers) <- c("Gene.ID")
marker.data <- cbind(data.frame(row.names=row.names(dbscan.plot.data), X=dbscan.plot.data$X, Y=dbscan.plot.data$Y, t(subset(normalized.data, row.names(normalized.data) %in% toupper(cell_markers$Gene.ID)))))
marker.data.melted <- melt(marker.data, id.vars=c("X", "Y"))
ggplot(marker.data.melted, aes(X,Y)) +
geom_point(aes(colour=value), alpha=0.3) +
facet_wrap(~variable) +
scale_colour_gradientn(colours=c('grey', rev(rainbow(3)))) +
FacetThemeOpts() +
theme(strip.text = element_text(size=10)) +
ggsave(paste0(outdir, "dbscan/", drop, ".", cluster,".markers.jpg"), height=15, width=15)
}
# -- heatmap of significant genes (1 vs all)
require(pheatmap)
require(RColorBrewer)
top.n <- 100
sig.genes.one.v.all %>% group_by(cluster) %>% top_n(top.n, avg.diff) -> top.genes
#sig.genes.one.v.all.dge <- scaled.data[as.vector(top.genes$gene), row.names(subset(dbscan.plot.data, Cluster!="Noise" & Cluster!="Small_Cluster"))]
sig.genes.one.v.all.dge <- scaled.data[as.vector(top.genes$gene), row.names(subset(dbscan.plot.data, Cluster!="Noise" & Cluster!="Small_Cluster"))]
# genes.to.remove <- c("MALAT1", "RN45S", row.names(sig.genes.one.v.all.dge[grepl("PCDH|UGT1", row.names(sig.genes.one.v.all.dge)),]))
# sig.genes.one.v.all.dge <- sig.genes.one.v.all.dge[!row.names(sig.genes.one.v.all.dge) %in% genes.to.remove, ]
heatmap.annotation <- subset(dbscan.plot.data, Cluster!="Noise" & Cluster!="Small_Cluster")[names(sig.genes.one.v.all.dge),c(3,8)]
heatmap.annotation <- heatmap.annotation[with(heatmap.annotation, order(Cluster, Experiment)),]
# ann.colors <- GetAnnotationColors(drop)
cluster.colors <- ColorHue(23)
cluster.colors <- colorRampPalette(c('magenta', 'grey', 'green'))(23)
ann.colors = list(
Experiment = c("e1"="#F8766D", "e2"="#D39200", "e3"="#93AA00", "e4"="#00BA38"),
Cluster   = c("1"=cluster.colors[1], "2"=cluster.colors[2], "3"=cluster.colors[3], "4"=cluster.colors[4], "5"=cluster.colors[5],
"6"=cluster.colors[6], "7"=cluster.colors[7], "8"=cluster.colors[8], "9"=cluster.colors[9], "10"=cluster.colors[10],
"11"=cluster.colors[11], "12"=cluster.colors[12], "13"=cluster.colors[13], "14"=cluster.colors[14], "15"=cluster.colors[15],
"16"=cluster.colors[16], "17"=cluster.colors[17], "18"=cluster.colors[18], "19"=cluster.colors[19], "20"=cluster.colors[20],
"21"=cluster.colors[21], "22"=cluster.colors[22], "23"=cluster.colors[23])
)
WriteData(sig.genes.one.v.all.dge, gzfile(paste0(outdir, "data/", drop, ".data.negbinom.one.v.all.sig.genes.tsv.gz")))
WriteData(heatmap.annotation, gzfile(paste0(outdir, "data/", drop, ".data.negbinom.one.v.all.sig.genes.annotation.tsv.gz")))
library(pheatmap)
library(RColorBrewer)
pheatmap(MinMax(sig.genes.one.v.all.dge[,row.names(heatmap.annotation)], min=-1.5, max=1.5),
cluster_rows=FALSE, cluster_cols=FALSE,
show_rownames=if (nrow(sig.genes.one.v.all.dge)<50) TRUE else FALSE, show_colnames=FALSE,
color=colorRampPalette(rev(brewer.pal(n=7, name="RdBu")))(100),
annotation_col=heatmap.annotation, annotation_colors=ann.colors,
gaps_col=cumsum(table(subset(heatmap.annotation, Cluster!="Noise" & Cluster!="Small_Cluster")$Cluster)),
filename=paste0(outdir, "heatmaps/", drop, ".negbinom.cluster.v.all.heatmap.",top.n,".genes.per.cluster.v2.png"), height=10, width=15)
View(sig.genes.pairwise)
install.packages("largeVis")
work_dir <- "/Users/harryyang/Documents/Research/Class/Com\ Sci\ 225/target_finder/"
setwd(work_dir)
?data.frame
?read.tabel
?read.table
input_matrix <- paste0(work_dir, "T1D_tissue_pos_state_matrix.txt")
mat <- read.table(input_matrix, header = TRUE, sep = "\t")
input_matrix <- paste0(work_dir, "T1D_tissue_pos_state_matrix.txt")
mat <- read.table(input_matrix, header = TRUE, sep = "\t")
View(mat)
mat <- read.table(input_matrix, header = TRUE, sep = "\t", index = TRUE )
mat <- read.table(input_matrix, header = TRUE, sep = "\t", row.names = 1 )
mat <- data.matrix(read.table(input_matrix, header = TRUE, sep = "\t", row.names = 1 ))
?heatmap
T1D_heatmap <- heatmap(mat, Rowv = NA, col = cm.colors(15), scale="column")
require(RColorBrewer)
RColorBrewer::display.brewer.all()
getPalette = colorRampPalette(brewer.pal(12,"Set3"))
View(getPalette)
pheatmap(t(genes))
pheatmap(t(genes))
?pheatmap
require(pheatmap)
pheatmap(t(genes))
pheatmap(mat)
pheatmap(mat, color = getPalette)
pheatmap(mat, color = getPalette(15))
RColorBrewer::display.brewer.all()
getPalette = colorRampPalette(brewer.pal(12,"RdPu"))
pheatmap(mat, color = getPalette(15))
getPalette = colorRampPalette(brewer.pal(12,"Accent"))
pheatmap(mat, color = getPalette(15))
getPalette = colorRampPalette(brewer.pal(12,"Set1"))
pheatmap(mat, color = getPalette(15))
getPalette = colorRampPalette(brewer.pal(9,"Set1"))
pheatmap(mat, color = getPalette(15))
getPalette = colorRampPalette(brewer.pal(9,"Set1"))
pheatmap(mat, color = getPalette(15))
pheatmap(mat, color = getPalette(15))
getPalette = colorRampPalette(brewer.pal(9,"Set1"))
pheatmap(mat, color = getPalette(15))
getPalette = colorRampPalette(brewer.pal(9,"Paired"))
pheatmap(mat, color = getPalette(15))
getPalette = colorRampPalette(brewer.pal(9,"PuOr"))
pheatmap(mat, color = getPalette(15))
getPalette = colorRampPalette(brewer.pal(9,"RdBu"))
pheatmap(mat, color = getPalette(15))
getPalette = colorRampPalette(brewer.pal(9,"RdYlBu"))
pheatmap(mat, color = getPalette(15))
?pheatmap
mat <- mat[order(rownames(mat))]
require(ggplot2)
require(pheatmap)
require(RColorBrewer)
RColorBrewer::display.brewer.all()
getPalette = colorRampPalette(brewer.pal(9,"RdYlBu"))
pheatmap(mat, color = getPalette(15))
mat <- data.matrix(read.table(input_matrix, header = TRUE, sep = "\t", row.names = 1 ))
mat <- mat[order(rownames(mat)),]
require(ggplot2)
require(pheatmap)
require(RColorBrewer)
RColorBrewer::display.brewer.all()
getPalette = colorRampPalette(brewer.pal(9,"RdYlBu"))
pheatmap(mat, color = getPalette(15))
pheatmap(t(mat), color = getPalette(15))
pheatmap(t(mat), color = getPalette(15), width=20, height = 10)
pheatmap(t(mat), color = getPalette(15), width=40, height = 10)
pheatmap(t(mat), color = getPalette(15), width=40, height = 10, filename = paste0(work_dir, "T1D_Heatmap.png"))
pheatmap(t(mat), color = getPalette(15), width=30, height = 15, filename = paste0(work_dir, "T1D_Heatmap.png"), fontsize = 10)
pheatmap(t(mat), color = getPalette(15), width=30, height = 15, filename = paste0(work_dir, "T1D_Heatmap.png"), fontsize = 20)
pheatmap(t(mat), color = getPalette(15), width=30, height = 15, filename = paste0(work_dir, "T1D_Heatmap.png"), fontsize_row = 15, fontsize_col = 10)
input_matrix <- paste0(work_dir, "T1D_binary_active_H3K4Me1_matrix.txt")
mat <- data.matrix(read.table(input_matrix, header = TRUE, sep = "\t", row.names = 1 ))
mat <- ?tramat[order(rownames(mat)),]
mat <- mat[order(rownames(mat)),]
require(ggplot2)
require(pheatmap)
require(RColorBrewer)
RColorBrewer::display.brewer.all()
getPalette = colorRampPalette(brewer.pal(9,"RdYlBu"))
pheatmap(t(mat), color = getPalette(15), width=40, height = 10, filename = paste0(work_dir, "T1D_Heatmap_binary.png"))
pheatmap(t(mat), color = rev(getPalette(15)), width=40, height = 10, filename = paste0(work_dir, "T1D_Heatmap_binary.png"))
input_matrix <- paste0(work_dir, "T1D_binarized_tissue_pos_state_matrix.txt")
mat <- data.matrix(read.table(input_matrix, header = TRUE, sep = "\t", row.names = 1 ))
mat <- mat[order(rownames(mat)),]
require(ggplot2)
require(pheatmap)
require(RColorBrewer)
RColorBrewer::display.brewer.all()
getPalette = colorRampPalette(brewer.pal(9,"RdYlBu"))
pheatmap(t(mat), color = rev(getPalette(15)), width=40, height = 10, filename = paste0(work_dir, "T1D_Heatmap_binary_simple.png"))
input_matrix <- paste0(work_dir, "T1D_binarized_H3K4Me1_pos_state_matrix.txt")
mat <- data.matrix(read.table(input_matrix, header = TRUE, sep = "\t", row.names = 1 ))
mat <- mat[order(rownames(mat)),]
require(ggplot2)
require(pheatmap)
require(RColorBrewer)
RColorBrewer::display.brewer.all()
getPalette = colorRampPalette(brewer.pal(9,"RdYlBu"))
pheatmap(t(mat), color = rev(getPalette(15)), width=40, height = 10, filename = paste0(work_dir, "T1D_Heatmap_binary_H3K4me1.png"))
